getsockopt&setsockopt   对socket套接字的所有可选项进行读取或设置
int setsockopt(int sock, int level, int optname, void *optval, socklen_t *optlen);

unistd.h
dup&dup2	//文件描述符拷贝函数
int dup(int fildes);
int dup2(int fildes, int fildes2);	//指定文件描述符的值

readv&writev函数   对数据进行整合传输及发送的函数
适用于任何情况，但是主要在tcp层关闭Nagle算法的时候更能体现其价值
sys/uio.h
ssize_t writev(int filedes, const struct iovec* iov, int iovcnt);
参数一：套接字文件描述符
参数二：
	struct iovec {
		void* iov_base;	//缓冲地址(数据缓冲区的地址)
		size_t iov_len;	//缓冲区长度
	}
参数三：参数二的长度信息



select模型

设置文件描述符
fd_set数组变量：用来存储监视多个文件描述符

对fd_set变量中注册或更改值得操作由下列宏完成
FD_ZERO(fd_set *fdset);		//将fd_set变量的所有位初始化为0
FD_SET(int fd, fd_set *fdset);	//在fdset指向的变量中注册文件描述符信息
FD_CLR(int fd, fd_set *fdset);	//在fdset指向的变量中删除文件描述符信息
FD_ISSET(int fd, fd_set *fdset);	//若参数fdset指向的变量中包含文件描述符fd的信息，则返回true

int select(int maxfd, fd_set *readset, fd_set *writeset, fd_set *exceptset, const struct timeval *timeout);
maxfd: 文件描述符的最大值
readset: 所有文件描述符中是否存在待读取数据
writeset: 所有文件描述符中是否可以传输无阻塞数据
exceptset: 所有文件描述符是否发生异常
timeout: 超时时间

返回值：
发生错误返回-1；超时返回0

select只要其中一个文件描述符满足其可读/可写/无异常就能够正确返回

超时结构体
struct timeval
{
	long tv_sec;	//秒
	long tv_usec;	//毫秒
}

当select超时时间设置为0的时候 函数运行到select的时候
会阻塞，当文件描述符中有一个是可读/可写的时候才能够往
下继续执行操作。

select模型中循环和传递监视对象信息都会占用很大资源
其中select函数向操作系统传递监视对象信息将对程序造成很大负担，且无法通过优化代码解决








epoll模型
epoll_create:	创建保存epoll文件描述符的空间  
int epoll_create(int size);		//成功返回文件描述符，失败返回-1
size的大小只是向操作系统提供建议而并非是决定值

epoll_ctl:		向空间注册并注销文件描述符
int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
op:用于指定监视对象的添加、删除或更改等操作
	1、EPOLL_CTL_ADD: 将文件描述符注册到epoll例程
	2、EPOLL_CTL_DEL: 从epoll例程中删除文件描述符 (第四个参数可以为NULL)
	3、EPOLL_CTL_MOD: 更改注册的文件描述符的关注事件发生情况
event:监视对象的事件类型

epoll_wait:		等待文件描述符发生变化
int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);
//成功时返回发生事件的文件描述符数
events:保存发生事件的文件描述符集合的结构体地址值(所指的缓冲区需要动态分配)
naxevents:第二个参数中可以保存的最大事件数
timeout:等待时间，传递-1时，一直等待直到发生事件

epoll_event结构体用来管理发生事件的文件描述符
struct epoll_event 
{
	__uint32_t events;
	epoll_data_t data;
}

typedef union epoll_data
{
	void *ptr;
	int fd;
	__uint32_t u32;
	__uint64_t u64;
} epoll_data_t;



